#!/usr/bin/env python3.6
import math

# Parameter setting -----
# Size of maze
sizeX, sizeY = 16, 16
# sizeX, sizeY = 4, 4

mazeH = [[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0],
         [0,1,1,1,1,0,1,1,1,1,0,1,1,1,1,0,0],
         [0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0],
         [0,0,0,1,0,1,1,1,1,1,1,0,1,0,0,0,0],
         [0,0,0,0,1,0,1,1,1,1,0,1,0,0,0,0,0],
         [0,0,0,1,0,1,0,1,1,0,0,1,0,0,0,0,0],
         [0,0,0,0,1,0,1,0,0,1,0,1,0,1,0,0,0],
         [0,0,0,0,0,1,0,1,1,0,1,0,0,0,0,0,0],
         [0,0,0,1,0,0,1,0,0,1,0,1,0,0,0,0,0],
         [0,0,0,0,0,0,0,1,1,0,1,0,0,0,0,0,0],
         [0,0,0,0,1,0,1,0,0,1,0,1,0,0,0,0,0],
         [0,1,0,1,0,1,0,1,1,0,1,0,1,0,0,0,0],
         [0,0,0,0,1,0,1,1,1,1,0,1,0,0,0,0,0],
         [0,0,0,1,0,1,1,1,1,1,1,0,1,0,0,0,0],
         [0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0],
         [0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0],
         [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0]
        ]

mazeV = [[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
         [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
         [1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1],
         [1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1],
         [1,1,1,1,0,1,0,0,0,0,0,1,0,1,1,1,1],
         [1,1,1,0,1,0,1,0,0,0,1,0,1,0,1,1,1],
         [1,0,1,1,0,1,0,1,0,1,0,1,0,1,1,0,1],
         [1,1,1,1,1,0,0,0,1,0,1,0,1,1,0,1,1],
         [1,1,1,0,1,1,0,1,0,0,0,1,0,1,1,1,1],
         [1,1,1,0,1,1,0,1,0,1,0,1,0,1,1,1,1],
         [1,1,1,1,1,0,1,0,1,0,1,0,1,1,1,0,1],
         [1,0,1,1,0,1,0,1,0,1,0,1,0,1,1,1,1],
         [1,1,1,0,1,0,1,0,0,0,1,0,1,0,1,1,1],
         [1,1,1,1,0,1,0,0,0,0,0,1,0,1,1,1,1],
         [1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1],
         [1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1],
         [1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]
        ]

# mazeH = [
#          [  1,  1,  1,  1, 0],
#          [  0,  0,  0,  0, 0],
#          [  0,  0,  1,  0, 0],
#          [  0,  0,  1,  0, 0],
#          [  1,  1,  1,  1, 0]
#         ]

# mazeV = [
#          [  0,  0,  0,  0, 0],
#          [  1,  0,  0,  0, 1],
#          [  1,  0,  0,  0, 1],
#          [  1,  0,  1,  1, 1],
#          [  1,  0,  0,  0, 1]
#         ]
### ============================================================
# Size of a wall
h, t, w = 0.05, 0.012, 0.18

# Functions -----
# X coordinate of a wall
def corX(i,j,p):
    if p == 'h':
        tmp=1
    else:
        tmp=0
    x = w/2*tmp + w*j
    return x

# Y coordinate of a wall
def corY(i,j,p):
    if p=='v':
        tmp=1
    else:
        tmp=0
    y = w/2*tmp + w*(sizeY - i)
    return y    

# Z coordinate of a wall
z = h/2

print('  <!-- wall definition -->')

for p in ['h', 'v']:
    for i in range(sizeY+1):
        for j in range(sizeX+1):
            # posture of angle for x y z
            if p == 'h':
                xa, ya, za = 0, 0, 0
                doseWallExist = mazeH[i][j]
#                print('p=', p, 'maze=', mazeH[i][j])
            else:
                xa, ya, za = 0, 0, 1.57
                doseWallExist = mazeV[i][j]
#                print('p=', p, 'maze=', mazeV[i][j])

            # output
            if doseWallExist != 0:
                print('  <xacro:wall>')
                print('    <pose>', round(corX(i,j,p),4), round(corY(i,j,p),4), z, xa, ya, za, '</pose>')
                print('  </xacro:wall>')

print('  <!-- wall definition -->')
print('</world>')
print('</sdf>')